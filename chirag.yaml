AWSTemplateFormatVersion: '2010-09-09'
 
Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub user or organization name
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch name
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token for CodePipeline access
 
Resources:
 
  # creation of VPC and Networking
  chiragvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: chiragvpc
 
  chiragsubnet-1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref chiragvpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: chiragsubnet-1
 
  chiragsubnet-2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref chiragvpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: chiragsubnet-2
 
  chiragigw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: chiragigw
 
  chiragattach-igw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref chiragvpc
      InternetGatewayId: !Ref chiragigw
 
  chiragrt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref chiragvpc
 
  chiragroute:
    Type: AWS::EC2::Route
    DependsOn: chiragattach-igw
    Properties:
      RouteTableId: !Ref chiragrt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref chiragigw
 
  chiragrt-assoc-1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref chiragsubnet-1
      RouteTableId: !Ref chiragrt
 
  chiragrt-assoc-2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref chiragsubnet-2
      RouteTableId: !Ref chiragrt
 
  # Security Groups
  chiragalb-sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to ALB
      VpcId: !Ref chiragvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
 
  chiragecs-sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS tasks
      VpcId: !Ref chiragvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref chiragalb-sg
 
  # ECS Cluster
  chiragecs-cluster:
    Type: AWS::ECS::Cluster
 
  # ECS Task Definition (here we have the Docker image placeholder)
  chiragtask-def:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: "<ECSExecutionRoleARN>"
      ContainerDefinitions:
        - Name: wildrydes-app
          Image: "<Account-ID>.dkr.ecr.<region>.amazonaws.com/wildrydes:latest"
          PortMappings:
            - ContainerPort: 5000
 
  # Application Load Balancer
  chiragalb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: chiragalb
      Scheme: internet-facing
      Subnets:
        - !Ref chiragsubnet-1
        - !Ref chiragsubnet-2
      SecurityGroups:
        - !Ref chiragalb-sg
 
  chiragtarget-group:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref chiragvpc
      Protocol: HTTP
      Port: 5000
      TargetType: ip
 
  chiraglistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref chiragalb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref chiragtarget-group
 
  # ECS Service
  chiragecs-service:
    Type: AWS::ECS::Service
    DependsOn: chiraglistener
    Properties:
      Cluster: !Ref chiragecs-cluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref chiragtask-def
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref chiragsubnet-1
            - !Ref chiragsubnet-2
          SecurityGroups:
            - !Ref chiragecs-sg
      LoadBalancers:
        - TargetGroupArn: !Ref chiragtarget-group
          ContainerName: wildrydes-app
          ContainerPort: 5000
 
  # CodePipeline (CI/CD)
  chiragartifact-bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: chiragartifacts
 
  chiragpipeline-role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
 
  chiragpipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt chiragpipeline-role.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref chiragartifact-bucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: "<CodeBuildProjectName>"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              Configuration:
                ClusterName: !Ref chiragecs-cluster
                ServiceName: !Ref chiragecs-service
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
 
  # CloudWatch Alarms
  chiragpipeline-alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CodePipeline fails
      MetricName: FailedExecutions
      Namespace: AWS/CodePipeline
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: PipelineName
          Value: !Ref chiragpipeline
 
Outputs:
  LoadBalancerDNS:
    Description: DNS name of the application load balancer
    Value: !GetAtt chiragalb.DNSName
 
 
